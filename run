#!/bin/bash

set -euo pipefail

NGROK_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[].public_url' || true)
if [[ "$NGROK_URL" == "" ]]
then
    echo "Could not find ngrok, run ./scripts/ngrok in a different terminal"
    exit 1
fi

WEBHOOK_FILE=server/webhook.txt.age
AGE_KEY=~/.config/age/keys.txt
OWNER="lukemassa"
REPO="atlantis-test"
HOOK_NAME="atlantis"
HOOK_URL="$NGROK_URL/events"
HOOK_SECRET="$(age -i $AGE_KEY -d $WEBHOOK_FILE)"
EVENTS='["issue_comment", "pull_request", "pull_request_review", "push"]'

echo "Checking for existing webhook for '${HOOK_NAME}'..."

# Find existing Atlantis webhook (match any ngrok URL ending with /events)
EXISTING_JSON=$(gh api "repos/${OWNER}/${REPO}/hooks" --jq \
  ".[] | select(.name == \"web\" and (.config.url | endswith(\"ngrok-free.app/events\")))" || true)

EXISTING_ID=$(jq -r '.id // empty' <<<"$EXISTING_JSON" 2>/dev/null || true)
EXISTING_URL=$(jq -r '.config.url // empty' <<<"$EXISTING_JSON" 2>/dev/null || true)

if [[ "$EXISTING_ID" =~ [[:space:]] ]]
then
    echo "Found more than one webhooks: $EXISTING_ID. One (or both) should be deleted"
    echo "https://github.com/$OWNER/$REPO/settings/hooks"
    exit 1
fi

if [[ -n "${EXISTING_ID}" ]]; then
  echo "Found existing webhook ID ${EXISTING_ID} with URL: ${EXISTING_URL}"

  if [[ "${EXISTING_URL}" == "${HOOK_URL}" ]]; then
    echo "âœ… URL unchanged; no action needed."
  else
    echo "ðŸ”„ URL changed; updating webhook..."
    gh api "repos/${OWNER}/${REPO}/hooks/${EXISTING_ID}" \
      --method PATCH \
      --input - <<EOF
{
  "config": {
    "url": "${HOOK_URL}",
    "content_type": "json",
    "secret": "${HOOK_SECRET}",
    "insecure_ssl": "0"
  },
  "events": ${EVENTS},
  "active": true
}
EOF
    echo "âœ… Webhook updated."
  fi
else
  echo "No existing webhook found; creating a new one..."
  gh api "repos/${OWNER}/${REPO}/hooks" \
    --method POST \
    --input - <<EOF
{
  "name": "web",
  "active": true,
  "events": ${EVENTS},
  "config": {
    "url": "${HOOK_URL}",
    "content_type": "json",
    "secret": "${HOOK_SECRET}",
    "insecure_ssl": "0"
  }
}
EOF
  echo "âœ… Webhook created."
fi

dir=$(pwd)
go run -C ~/atlantis . server \
    --gh-user lukemassa --gh-token $(gh auth token) \
    --repo-allowlist='github.com/lukemassa/atlantis-test' \
    --gh-webhook-secret=$HOOK_SECRET \
    --automerge \
    --emoji-reaction eyes \
    --repo-config=$dir/server/repos.yaml
